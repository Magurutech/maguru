{
  "numTotalTests": 83,
  "numPassedTests": 83,
  "numFailedTests": 0,
  "numPendingTests": 0,
  "startTime": "2025-06-29T07:26:58.254Z",
  "endTime": "2025-06-29T07:27:03.019Z",
  "testResults": [
    {
      "testFilePath": "D:\\2-Maguru\\maguru\\features\\auth\\lib\\roleUtils.test.ts",
      "testFileResults": [
        {
          "ancestorTitles": [
            "roleUtils",
            "parseJWT"
          ],
          "fullName": "roleUtils parseJWT should parse valid JWT token correctly",
          "status": "passed",
          "title": "should parse valid JWT token correctly",
          "failureMessages": [],
          "duration": 8
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "parseJWT"
          ],
          "fullName": "roleUtils parseJWT should return null for invalid JWT format",
          "status": "passed",
          "title": "should return null for invalid JWT format",
          "failureMessages": [],
          "duration": 4
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "parseJWT"
          ],
          "fullName": "roleUtils parseJWT should return null for expired token",
          "status": "passed",
          "title": "should return null for expired token",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "parseJWT"
          ],
          "fullName": "roleUtils parseJWT should handle malformed base64 payload",
          "status": "passed",
          "title": "should handle malformed base64 payload",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "parseJWT"
          ],
          "fullName": "roleUtils parseJWT should handle invalid JSON in payload",
          "status": "passed",
          "title": "should handle invalid JSON in payload",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "parseJWT"
          ],
          "fullName": "roleUtils parseJWT should handle missing required claims",
          "status": "passed",
          "title": "should handle missing required claims",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "isValidRole"
          ],
          "fullName": "roleUtils isValidRole should validate correct role strings",
          "status": "passed",
          "title": "should validate correct role strings",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "isValidRole"
          ],
          "fullName": "roleUtils isValidRole should reject invalid role values",
          "status": "passed",
          "title": "should reject invalid role values",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "extractRoleFromPayload"
          ],
          "fullName": "roleUtils extractRoleFromPayload should extract valid role from payload",
          "status": "passed",
          "title": "should extract valid role from payload",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "extractRoleFromPayload"
          ],
          "fullName": "roleUtils extractRoleFromPayload should return default role for invalid role in payload",
          "status": "passed",
          "title": "should return default role for invalid role in payload",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "getRoleFromToken"
          ],
          "fullName": "roleUtils getRoleFromToken should extract role from valid token",
          "status": "passed",
          "title": "should extract role from valid token",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "getRoleFromToken"
          ],
          "fullName": "roleUtils getRoleFromToken should return default role for invalid token",
          "status": "passed",
          "title": "should return default role for invalid token",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "getRoleFromToken"
          ],
          "fullName": "roleUtils getRoleFromToken should return default role for missing role claim",
          "status": "passed",
          "title": "should return default role for missing role claim",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "createRoleError"
          ],
          "fullName": "roleUtils createRoleError should create standardized error object",
          "status": "passed",
          "title": "should create standardized error object",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "createRoleError"
          ],
          "fullName": "roleUtils createRoleError should work without original error",
          "status": "passed",
          "title": "should work without original error",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "RoleCacheManager"
          ],
          "fullName": "roleUtils RoleCacheManager should implement singleton pattern correctly",
          "status": "passed",
          "title": "should implement singleton pattern correctly",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "RoleCacheManager"
          ],
          "fullName": "roleUtils RoleCacheManager should set and get role with TTL",
          "status": "passed",
          "title": "should set and get role with TTL",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "RoleCacheManager"
          ],
          "fullName": "roleUtils RoleCacheManager should handle cache expiration",
          "status": "passed",
          "title": "should handle cache expiration",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "RoleCacheManager"
          ],
          "fullName": "roleUtils RoleCacheManager should integrate with sessionStorage",
          "status": "passed",
          "title": "should integrate with sessionStorage",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "RoleCacheManager"
          ],
          "fullName": "roleUtils RoleCacheManager should handle sessionStorage errors gracefully",
          "status": "passed",
          "title": "should handle sessionStorage errors gracefully",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "RoleCacheManager"
          ],
          "fullName": "roleUtils RoleCacheManager should clear role cache",
          "status": "passed",
          "title": "should clear role cache",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "RoleCacheManager"
          ],
          "fullName": "roleUtils RoleCacheManager should clear all cache entries",
          "status": "passed",
          "title": "should clear all cache entries",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "RoleSyncManager"
          ],
          "fullName": "roleUtils RoleSyncManager should implement singleton pattern correctly",
          "status": "passed",
          "title": "should implement singleton pattern correctly",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "RoleSyncManager"
          ],
          "fullName": "roleUtils RoleSyncManager should initialize and broadcast role updates",
          "status": "passed",
          "title": "should initialize and broadcast role updates",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "RoleSyncManager"
          ],
          "fullName": "roleUtils RoleSyncManager should broadcast role clearing",
          "status": "passed",
          "title": "should broadcast role clearing",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "RoleSyncManager"
          ],
          "fullName": "roleUtils RoleSyncManager should handle subscription and unsubscription",
          "status": "passed",
          "title": "should handle subscription and unsubscription",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "RoleSyncManager"
          ],
          "fullName": "roleUtils RoleSyncManager should cleanup channel on destroy",
          "status": "passed",
          "title": "should cleanup channel on destroy",
          "failureMessages": [],
          "duration": 0
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "retryOperation"
          ],
          "fullName": "roleUtils retryOperation should execute operation successfully on first try",
          "status": "passed",
          "title": "should execute operation successfully on first try",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "retryOperation"
          ],
          "fullName": "roleUtils retryOperation should retry on failure and succeed",
          "status": "passed",
          "title": "should retry on failure and succeed",
          "failureMessages": [],
          "duration": 60
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "retryOperation"
          ],
          "fullName": "roleUtils retryOperation should throw after exhausting all retries",
          "status": "passed",
          "title": "should throw after exhausting all retries",
          "failureMessages": [],
          "duration": 71
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "retryOperation"
          ],
          "fullName": "roleUtils retryOperation should respect delay between retries",
          "status": "passed",
          "title": "should respect delay between retries",
          "failureMessages": [],
          "duration": 60
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "debounce"
          ],
          "fullName": "roleUtils debounce should debounce function calls",
          "status": "passed",
          "title": "should debounce function calls",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "debounce"
          ],
          "fullName": "roleUtils debounce should reset debounce timer on each call",
          "status": "passed",
          "title": "should reset debounce timer on each call",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "roleUtils",
            "debounce"
          ],
          "fullName": "roleUtils debounce should maintain function context",
          "status": "passed",
          "title": "should maintain function context",
          "failureMessages": [],
          "duration": 1
        }
      ],
      "failureMessage": null
    },
    {
      "testFilePath": "D:\\2-Maguru\\maguru\\features\\auth\\hooks\\useUserRole.test.ts",
      "testFileResults": [
        {
          "ancestorTitles": [
            "useUserRole hooks",
            "useUserRole (main hook)"
          ],
          "fullName": "useUserRole hooks useUserRole (main hook) should return role state from context",
          "status": "passed",
          "title": "should return role state from context",
          "failureMessages": [],
          "duration": 31
        },
        {
          "ancestorTitles": [
            "useUserRole hooks",
            "useUserRole (main hook)"
          ],
          "fullName": "useUserRole hooks useUserRole (main hook) should provide computed helper values",
          "status": "passed",
          "title": "should provide computed helper values",
          "failureMessages": [],
          "duration": 8
        },
        {
          "ancestorTitles": [
            "useUserRole hooks",
            "useUserRole (main hook)"
          ],
          "fullName": "useUserRole hooks useUserRole (main hook) should handle different roles correctly",
          "status": "passed",
          "title": "should handle different roles correctly",
          "failureMessages": [],
          "duration": 9
        },
        {
          "ancestorTitles": [
            "useUserRole hooks",
            "useUserRole (main hook)"
          ],
          "fullName": "useUserRole hooks useUserRole (main hook) should handle context unavailable error",
          "status": "passed",
          "title": "should handle context unavailable error",
          "failureMessages": [],
          "duration": 38
        },
        {
          "ancestorTitles": [
            "useUserRole hooks",
            "useRoleGuard"
          ],
          "fullName": "useUserRole hooks useRoleGuard should provide basic role checks",
          "status": "passed",
          "title": "should provide basic role checks",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "useUserRole hooks",
            "useRoleGuard"
          ],
          "fullName": "useUserRole hooks useRoleGuard should implement role hierarchy correctly",
          "status": "passed",
          "title": "should implement role hierarchy correctly",
          "failureMessages": [],
          "duration": 5
        },
        {
          "ancestorTitles": [
            "useUserRole hooks",
            "useRoleGuard"
          ],
          "fullName": "useUserRole hooks useRoleGuard should handle context-aware guards",
          "status": "passed",
          "title": "should handle context-aware guards",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "useUserRole hooks",
            "useRoleLoadingState"
          ],
          "fullName": "useUserRole hooks useRoleLoadingState should provide loading state management",
          "status": "passed",
          "title": "should provide loading state management",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "useUserRole hooks",
            "useRoleLoadingState"
          ],
          "fullName": "useUserRole hooks useRoleLoadingState should generate appropriate status messages",
          "status": "passed",
          "title": "should generate appropriate status messages",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "useUserRole hooks",
            "useRoleConditional"
          ],
          "fullName": "useUserRole hooks useRoleConditional should provide conditional rendering helpers",
          "status": "passed",
          "title": "should provide conditional rendering helpers",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "useUserRole hooks",
            "useRoleConditional"
          ],
          "fullName": "useUserRole hooks useRoleConditional should handle feature flags correctly",
          "status": "passed",
          "title": "should handle feature flags correctly",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "useUserRole hooks",
            "useRoleErrorHandling"
          ],
          "fullName": "useUserRole hooks useRoleErrorHandling should categorize errors correctly",
          "status": "passed",
          "title": "should categorize errors correctly",
          "failureMessages": [],
          "duration": 1
        },
        {
          "ancestorTitles": [
            "useUserRole hooks",
            "useRoleErrorHandling"
          ],
          "fullName": "useUserRole hooks useRoleErrorHandling should provide user-friendly error messages",
          "status": "passed",
          "title": "should provide user-friendly error messages",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "useUserRole hooks",
            "useRoleDevelopment"
          ],
          "fullName": "useUserRole hooks useRoleDevelopment should provide development utilities when NODE_ENV is development",
          "status": "passed",
          "title": "should provide development utilities when NODE_ENV is development",
          "failureMessages": [],
          "duration": 5
        },
        {
          "ancestorTitles": [
            "useUserRole hooks",
            "useRoleDevelopment"
          ],
          "fullName": "useUserRole hooks useRoleDevelopment should return development functions structure correctly",
          "status": "passed",
          "title": "should return development functions structure correctly",
          "failureMessages": [],
          "duration": 2
        },
        {
          "ancestorTitles": [
            "useUserRole hooks",
            "useRoleDevelopment"
          ],
          "fullName": "useUserRole hooks useRoleDevelopment should handle role switching warnings in production-like environment",
          "status": "passed",
          "title": "should handle role switching warnings in production-like environment",
          "failureMessages": [],
          "duration": 2
        }
      ],
      "failureMessage": null
    },
    {
      "testFilePath": "D:\\2-Maguru\\maguru\\features\\auth\\components\\RoleDisplay.test.tsx",
      "testFileResults": [
        {
          "ancestorTitles": [
            "RoleDisplay",
            "Component Rendering"
          ],
          "fullName": "RoleDisplay Component Rendering should render loading state correctly",
          "status": "passed",
          "title": "should render loading state correctly",
          "failureMessages": [],
          "duration": 46
        },
        {
          "ancestorTitles": [
            "RoleDisplay",
            "Component Rendering"
          ],
          "fullName": "RoleDisplay Component Rendering should render error state with retry button",
          "status": "passed",
          "title": "should render error state with retry button",
          "failureMessages": [],
          "duration": 19
        },
        {
          "ancestorTitles": [
            "RoleDisplay",
            "Component Rendering"
          ],
          "fullName": "RoleDisplay Component Rendering should display role information correctly for admin",
          "status": "passed",
          "title": "should display role information correctly for admin",
          "failureMessages": [],
          "duration": 24
        },
        {
          "ancestorTitles": [
            "RoleDisplay",
            "Component Rendering"
          ],
          "fullName": "RoleDisplay Component Rendering should display role information correctly for creator",
          "status": "passed",
          "title": "should display role information correctly for creator",
          "failureMessages": [],
          "duration": 9
        },
        {
          "ancestorTitles": [
            "RoleDisplay",
            "Component Rendering"
          ],
          "fullName": "RoleDisplay Component Rendering should display role information correctly for user",
          "status": "passed",
          "title": "should display role information correctly for user",
          "failureMessages": [],
          "duration": 19
        },
        {
          "ancestorTitles": [
            "RoleDisplay",
            "Component Rendering"
          ],
          "fullName": "RoleDisplay Component Rendering should show role status and flags correctly",
          "status": "passed",
          "title": "should show role status and flags correctly",
          "failureMessages": [],
          "duration": 22
        },
        {
          "ancestorTitles": [
            "RoleDisplay",
            "User Interactions"
          ],
          "fullName": "RoleDisplay User Interactions should handle refresh role button",
          "status": "passed",
          "title": "should handle refresh role button",
          "failureMessages": [],
          "duration": 7
        },
        {
          "ancestorTitles": [
            "RoleDisplay",
            "User Interactions"
          ],
          "fullName": "RoleDisplay User Interactions should disable refresh button when loading",
          "status": "passed",
          "title": "should disable refresh button when loading",
          "failureMessages": [],
          "duration": 15
        },
        {
          "ancestorTitles": [
            "RoleDisplay",
            "User Interactions"
          ],
          "fullName": "RoleDisplay User Interactions should handle retry on error",
          "status": "passed",
          "title": "should handle retry on error",
          "failureMessages": [],
          "duration": 7
        },
        {
          "ancestorTitles": [
            "RoleDisplay",
            "Permission Examples Display"
          ],
          "fullName": "RoleDisplay Permission Examples Display should display permission examples correctly for admin",
          "status": "passed",
          "title": "should display permission examples correctly for admin",
          "failureMessages": [],
          "duration": 18
        },
        {
          "ancestorTitles": [
            "RoleDisplay",
            "Permission Examples Display"
          ],
          "fullName": "RoleDisplay Permission Examples Display should display permission examples correctly for user",
          "status": "passed",
          "title": "should display permission examples correctly for user",
          "failureMessages": [],
          "duration": 8
        },
        {
          "ancestorTitles": [
            "RoleDisplay",
            "Feature Flags Status"
          ],
          "fullName": "RoleDisplay Feature Flags Status should show feature flags status correctly for admin",
          "status": "passed",
          "title": "should show feature flags status correctly for admin",
          "failureMessages": [],
          "duration": 13
        },
        {
          "ancestorTitles": [
            "RoleDisplay",
            "Feature Flags Status"
          ],
          "fullName": "RoleDisplay Feature Flags Status should show feature flags status correctly for user",
          "status": "passed",
          "title": "should show feature flags status correctly for user",
          "failureMessages": [],
          "duration": 7
        },
        {
          "ancestorTitles": [
            "RoleDisplay",
            "Conditional Content Rendering"
          ],
          "fullName": "RoleDisplay Conditional Content Rendering should render role-specific content for admin",
          "status": "passed",
          "title": "should render role-specific content for admin",
          "failureMessages": [],
          "duration": 10
        },
        {
          "ancestorTitles": [
            "RoleDisplay",
            "Conditional Content Rendering"
          ],
          "fullName": "RoleDisplay Conditional Content Rendering should render role-specific content for creator",
          "status": "passed",
          "title": "should render role-specific content for creator",
          "failureMessages": [],
          "duration": 11
        },
        {
          "ancestorTitles": [
            "RoleDisplay",
            "Conditional Content Rendering"
          ],
          "fullName": "RoleDisplay Conditional Content Rendering should display public content for all users",
          "status": "passed",
          "title": "should display public content for all users",
          "failureMessages": [],
          "duration": 7
        },
        {
          "ancestorTitles": [
            "RoleDisplay",
            "Helper Components"
          ],
          "fullName": "RoleDisplay Helper Components should render PermissionItem with correct allowed state",
          "status": "passed",
          "title": "should render PermissionItem with correct allowed state",
          "failureMessages": [],
          "duration": 8
        },
        {
          "ancestorTitles": [
            "RoleDisplay",
            "Helper Components"
          ],
          "fullName": "RoleDisplay Helper Components should render PermissionItem with correct denied state",
          "status": "passed",
          "title": "should render PermissionItem with correct denied state",
          "failureMessages": [],
          "duration": 7
        },
        {
          "ancestorTitles": [
            "RoleDisplay",
            "Helper Components"
          ],
          "fullName": "RoleDisplay Helper Components should render FeatureFlag with correct enabled state",
          "status": "passed",
          "title": "should render FeatureFlag with correct enabled state",
          "failureMessages": [],
          "duration": 11
        }
      ],
      "failureMessage": null
    },
    {
      "testFilePath": "D:\\2-Maguru\\maguru\\features\\auth\\context\\UserRoleContext.test.tsx",
      "testFileResults": [
        {
          "ancestorTitles": [
            "UserRoleContext",
            "UserRoleProvider"
          ],
          "fullName": "UserRoleContext UserRoleProvider should initialize with loading state",
          "status": "passed",
          "title": "should initialize with loading state",
          "failureMessages": [],
          "duration": 45
        },
        {
          "ancestorTitles": [
            "UserRoleContext",
            "UserRoleProvider"
          ],
          "fullName": "UserRoleContext UserRoleProvider should fetch role from Clerk session on mount",
          "status": "passed",
          "title": "should fetch role from Clerk session on mount",
          "failureMessages": [],
          "duration": 26
        },
        {
          "ancestorTitles": [
            "UserRoleContext",
            "UserRoleProvider"
          ],
          "fullName": "UserRoleContext UserRoleProvider should handle Clerk session unavailable",
          "status": "passed",
          "title": "should handle Clerk session unavailable",
          "failureMessages": [],
          "duration": 19
        },
        {
          "ancestorTitles": [
            "UserRoleContext",
            "UserRoleProvider"
          ],
          "fullName": "UserRoleContext UserRoleProvider should integrate with cache manager",
          "status": "passed",
          "title": "should integrate with cache manager",
          "failureMessages": [],
          "duration": 14
        },
        {
          "ancestorTitles": [
            "UserRoleContext",
            "UserRoleProvider"
          ],
          "fullName": "UserRoleContext UserRoleProvider should handle cross-tab synchronization",
          "status": "passed",
          "title": "should handle cross-tab synchronization",
          "failureMessages": [],
          "duration": 17
        },
        {
          "ancestorTitles": [
            "UserRoleContext",
            "UserRoleProvider"
          ],
          "fullName": "UserRoleContext UserRoleProvider should handle error boundary with fallback UI",
          "status": "passed",
          "title": "should handle error boundary with fallback UI",
          "failureMessages": [],
          "duration": 36
        },
        {
          "ancestorTitles": [
            "UserRoleContext",
            "UserRoleProvider"
          ],
          "fullName": "UserRoleContext UserRoleProvider should support development mode",
          "status": "passed",
          "title": "should support development mode",
          "failureMessages": [],
          "duration": 4
        },
        {
          "ancestorTitles": [
            "UserRoleContext",
            "Context Actions"
          ],
          "fullName": "UserRoleContext Context Actions should provide setRole action",
          "status": "passed",
          "title": "should provide setRole action",
          "failureMessages": [],
          "duration": 7
        },
        {
          "ancestorTitles": [
            "UserRoleContext",
            "Context Actions"
          ],
          "fullName": "UserRoleContext Context Actions should provide clearRole action",
          "status": "passed",
          "title": "should provide clearRole action",
          "failureMessages": [],
          "duration": 12
        },
        {
          "ancestorTitles": [
            "UserRoleContext",
            "Context Actions"
          ],
          "fullName": "UserRoleContext Context Actions should provide refreshRole action",
          "status": "passed",
          "title": "should provide refreshRole action",
          "failureMessages": [],
          "duration": 5
        },
        {
          "ancestorTitles": [
            "UserRoleContext",
            "useUserRoleContext hook"
          ],
          "fullName": "UserRoleContext useUserRoleContext hook should throw error when used outside provider",
          "status": "passed",
          "title": "should throw error when used outside provider",
          "failureMessages": [],
          "duration": 31
        },
        {
          "ancestorTitles": [
            "UserRoleContext",
            "useUserRoleContext hook"
          ],
          "fullName": "UserRoleContext useUserRoleContext hook should return context value when used within provider",
          "status": "passed",
          "title": "should return context value when used within provider",
          "failureMessages": [],
          "duration": 3
        },
        {
          "ancestorTitles": [
            "UserRoleContext",
            "Lifecycle and Cleanup"
          ],
          "fullName": "UserRoleContext Lifecycle and Cleanup should cleanup resources on unmount",
          "status": "passed",
          "title": "should cleanup resources on unmount",
          "failureMessages": [],
          "duration": 4
        },
        {
          "ancestorTitles": [
            "UserRoleContext",
            "Lifecycle and Cleanup"
          ],
          "fullName": "UserRoleContext Lifecycle and Cleanup should handle auth state changes",
          "status": "passed",
          "title": "should handle auth state changes",
          "failureMessages": [],
          "duration": 11
        }
      ],
      "failureMessage": null
    }
  ]
}